<?phpclass HomeController extends BaseController {	 	//Register	public function showRegister(){		//show the form		return View::make('register');	}	public function doRegister(){		//custom message		$messages = array(   		 'g-recaptcha-response.required' => 'We need to know if you are a human!',   		 'name.required' => 'You Must Have A Name' ,   		 'email.required' => 'We need your email' , 		);		//validate the info , create rules for the inputs		$rules = array(			'email' => 'required|email|Unique:users' , //make sure the email is present and is email			'password' => 'required|alphaNum|min:3|Confirmed', //password can only be alphanumeric and has to be greater than 3 characters			'password_confirmation' => 'required' ,			'name' => 'required|alpha_spaces|min:4|max:32',			'g-recaptcha-response' => 'required|recaptcha'		);		// run the validation rules on the inputs from the form		$validator = Validator::make(Input::all() ,$rules , $messages) ;		//if the validator fails, redirect back to the form		if($validator->fails()) {			return Redirect::to('register')				->withErrors($validator) //send back all errors to the				->withInput(Input::except('password'));		}else{			$confirmation_code = str_random(30);			$data = Input::only(['email','name','password','gender']);			$data['password'] = Hash::make($data['password']) ;			$data['confirmation_code'] = $confirmation_code ; 			$newUser = User::create($data);			Mail::queue('emails.verify', array('confirmation_code' =>$confirmation_code), function($message) {            $message->to(Input::get('email'), Input::get('username'))                ->subject('Verify your email address');			});			if($newUser){				//Auth::login($newUser);				return Redirect::to('login')->with('flash_notice' , 'Thanks For Singing Up! <br> Please Check Your Email Adderss For Verification')				->withInput(Input::only('email'));;			}			return Redirect::to('register')->withInput();		}	}	//Login	public function showLogin(){			//show the form			return View::make('login');		}	public function doLogin(){		$message = array(			'password.required' => 'Login is not possible without a Password..',			'email.email' => 'Enter a valid email address like example@example.com',			'email.required'  => 'Without email we can\'t log you in'			);	 	//validate the info , create rules for the inputs		$rules = array(			'email' => 'required|email|exists:users,email' , //make sure the email is present and is email			'password' => 'required|alphaNum|min:3' //password can only be alphanumeric and has to be greater than 3 characters		);		// run the validation rules on the inputs from the form		$validator = Validator::make(Input::all() ,$rules,$message) ;		//if the validator fails, redirect back to the form		if($validator->fails()) {			return Redirect::to('login')				->withErrors($validator); //send back all errors to the		}else{			//create our user data for the authentication			$userdata = array(				'email' => Input::get('email'),				'password' => Input::get('password')			);			$remember = (Input::get('remember') == 'on')? true : false ; //for remember me			//attempt to do the login			if(Auth::attempt($userdata, $remember)){				if(Auth::user()->confirmed == 0){					Auth::logout() ;					return Redirect::to('login')->with('flash_error' , 'Email Verification is required<br>Please check your email<br>Or<a href="resend_confirm">ReSend The Confrimation</a>');				}								//validation successful!				//redirect them the secure section or whatever				//return Rediret::to('secure');				//for now we'll jush echo success(even though echoing in a controller is bad				return Redirect::to('home')->with('flash_notice' , 'You have successfully logged in!');			}else{				//validation not successful, send back to form				return Redirect::to('login')->withErrors(['password' => ['Wrong Password::Try Again']])				->withInput(Input::except('password'));			}		}	}	public function doLogout(){		Auth::logout() ; //log the user out of our application		return Redirect::to('login')->with('flash_notice' , 'You have successfully logged out!') ; //redirect the user to the login page	}	public function showPost( )	{		//for groups		$groups = User::find(Auth::id())->groups() ; //Note::use get() in the function directly				$x = 2 ;		$gpid[1] = 0 ;				if($groups){  			foreach ($groups as $key => $value) {				$gpid[$x] = $value->id ;					$x++ ;			}		}		//for post according to the groups		$posts = Post::whereIn('group_id' , $gpid)->orderBy('id','desc')->simplePaginate(10);		 		return View::make('home')->with('posts' , $posts)->with('groups' , $groups) ;	}	public function confirm($confirmation_code){ // account is activated here if confirmation code is valid		if( ! $confirmation_code)        {            throw new InvalidConfirmationCodeException;        }        $user = User::whereConfirmationCode($confirmation_code)->first();        if ( ! $user)        {            throw new InvalidConfirmationCodeException;        }		         $user->confirmed = 1;        $user->confirmation_code = null;        $user->save();        				Mail::queue('emails.auth.welcome', array('name' => $user->name), function($message) use($user) {			            $message->to($user->email, $user->name)			                ->subject('Account Active');						});        return Redirect::to('login')->with('flash_notice','You have successfully verified your account.<br>Please Log In');	}		public function resend_confirm() // confirmation code is resend for acount activation	{			$rules = array(				'email' => 'required|email|exists:users,email'				);			$validator = Validator::make(['email' => Input::get('email')],$rules);			if($validator->fails()){					return Redirect::to('resend_confirm')->withErrors($validator);			}else{			$email = Input::get('email');			$User = User::where('email','=',$email)->first() ;			if($User->confirmed == 1){				return Redirect::to('login')->with('flash_notice','Aleardy Confirmed <br>Please Login') ;			}			$confirmation_code = str_random(30);			$User_check = $User->update([				'confirmation_code' => $confirmation_code 				]);			Mail::queue('emails.verify', array('confirmation_code' => $confirmation_code , 'name' => $User->name), function($message) use($User){            $message->to(Input::get('email'), $User->name )                ->subject('Verify your email address');			});			if($User_check){				//Auth::login($newUser);				return Redirect::to('login')->with('flash_notice' , 'Confirmation code has been send! <br> Please Check Your Email Adderss For Verification<br> And Log In')				->withInput(Input::only('email'));;			}			return Redirect::to('register')->withErrors(['email' => 'Cant Proceed At the Moment<br>Try Again'])->withInput();			}		}	public function password_reset(){ //email is send here with confirmation code		 	            $rules = array(					'email' => 'required|email|exists:users,email'					);				$validator = Validator::make(['email' => Input::get('email')],$rules);				if($validator->fails()){						return Redirect::to('resend_confirm')->withErrors($validator);				}else{					$email = Input::get('email');					$User = User::where('email','=',$email)->first() ;					if($User->confirmed == 0){						return Redirect::to('resend_confirm')->with('flash_error','Account is not Activited<br>Please! Activate Your Account First <a href="resend_confirm">Resend Confirmation</a>') ;					}					$confirmation_code = str_random(30);					$User_check = $User->update([						'confirmation_code' => $confirmation_code 						]);					Mail::queue('emails.password_code_sent', array('confirmation_code' => $confirmation_code), function($message) use($User){		            $message->to(Input::get('email'), $User->name )		                ->subject('Reset your password');					});					if($User_check){						//Auth::login($newUser);						return Redirect::to('login')->with('flash_notice' , 'Confirmation code has been send! <br> Please Check Your Email Adderss For Password Reset<br> And Log In')						->withInput(Input::only('email'));;					}					return Redirect::to('register')->withErrors(['email' => 'Cant Proceed At the Moment<br>Try Again'])->withInput();				}		}		public function password_reset_withCode($confirmationCode){ //main password reset function		$rules = array(					'password' => 'required|alphaNum|min:3|Confirmed',  					'password_confirmation' => 'required' ,					'g-recaptcha-response' => 'required|recaptcha'					);				$validator = Validator::make(Input::all(),$rules);				if($validator->fails()){						return Redirect::to('password_reset/'.$confirmationCode)->withErrors($validator);				}else{					 						$user = User::whereConfirmationCode($confirmationCode)->first();				        if ( ! $user)				        {				            return Redirect::to('password_reset')->with('flash_error','Invalid Confirmation Code');				        }				        $user->password = Hash::make(Input::get('password')) ;				        $user->confirmation_code = null;				        $User_check = $user->save();          					if($User_check){						//Auth::login($newUser);							Mail::queue('emails.password_change_remender', array('name' => Auth::user()->name), function($message) {				            $message->to(Auth::user()->email, Auth::user()->name)				                ->subject('Password Changed');							});						return Redirect::to('login')->with('flash_notice' , 'All is done Please Log in') ;					 }					return Redirect::to('register')->withErrors(['email' => 'Cant Proceed At the Moment<br>Try Again'])->withInput();				}	}	public function doSubmitReport(){ //submission of the report ..sending mail to me		$messages = array(   		 'g-recaptcha-response.required' => 'We need to know if you are a human!',   		 'feedbackmessage.required' => 'You Must Have A Problem' ,   		 'email.required' => 'We need your email' ,    		 'name.required' => 'You must have a Name' , 		);		//validate the info , create rules for the inputs		$rules = array(			'email' => 'required|email' , 			'feedbackmessage' => 'required|alpha_spaces|min:6',			'g-recaptcha-response' => 'required|recaptcha',			'name' => 'required|alpha_spaces|min:4|max:32',		);		// run the validation rules on the inputs from the form		$validator = Validator::make(Input::all() ,$rules , $messages) ;		//if the validator fails, redirect back to the form		if($validator->fails()) {			return Redirect::back()				->withErrors($validator) //send back all errors to the				->withInput(Input::all());		}else{			//message to us//Note::dont use message variable with mail			Mail::queue('emails.emailtous', Input::all() , function($message) {            $message->to('navinayer56@gmail.com', 'Navin')                ->subject('Here is Your Feedback');			});			 				//message to sender				Mail::queue('emails.thanks', Input::all() , function($message) {		            $message->to(Input::get('email'), Input::get('username'))		                ->subject('Thanks for Your Feedback');					});				return Redirect::to('home')->with('flash_notice' , 'Thanks For Feedback!<br> We will read Your Feedback');				 		 		}	}	public function showSearch(){		$data = array(Input::get('user_name'),Input::get('group_name'),Input::get('query')) ;		$lengths = array_map('strlen', $data);				if(max($lengths) < 3)	return View::make('search.view')->with('title',null) ;		if(Input::has('user_name')) {			$users = User::select('id','name')->where('name','LIKE', Input::get('user_name').'%')->simplePaginate() ;			return View::make('search.view')->with('lists' , $users)->with('title','Users');		}elseif(Input::has('group_name')) {			$groups = Group::select('id','name' ,'about')->where('name','LIKE', Input::get('group_name').'%')->simplePaginate() ;			return View::make('search.view')->with('lists',$groups)->with('title','Groups');		}		if(Input::has('query')){						Paginator::setPageName('users') ;			$users = User::select('id','name')->where('name','LIKE', Input::get('query').'%')->simplePaginate() ;						Paginator::setPageName('groups') ;			$groups = Group::select('id','name' ,'about')->where('name','LIKE', Input::get('query').'%')->simplePaginate() ;						return View::make('search.view')->with('title' , 'query')			->with('users' , $users)->with('groups',$groups);				}	}	public function search(){		header('Content-Type: application/json');		if( !Input::has('query') ){			echo json_encode([]) ;			exit() ;		}		if( Input::get('type') == 'users' ){		$users = User::select('id','name','profile_pic' , 'company')->where('name','LIKE', Input::get('query').'%')->get() ;			echo json_encode($users) ;		}			if( Input::get('type') == 'groups' ){		$groups = Group::select('id','name' , 'admin_id')->where('name','LIKE', Input::get('query').'%')->get() ;				foreach ($groups as $group) {			$group->admin_id = User::find($group->admin_id)->name; 		}		echo json_encode($groups) ;		}		 	}	public function unreadmessage(){		$user_id = Auth::id() ;		$Conversationlist = array();		$conversations = Conversation::where('user1_id','=',$user_id)		->orWhere('user2_id','=',$user_id)->get() ;		foreach ($conversations as $Conversation) {			$Conversationlist[] = $Conversation->id ;		}				if(!empty($Conversationlist)){			$message = Message::whereIn('conversation_id',$Conversationlist)			->where('seen','=',0)->where('user_id','!=',$user_id)->get()->count() ;		}else{			$message =  0 ;		}		$messageBadgeColor = 'label-default';		if($message)              $messageBadgeColor = 'label-success';                		echo  '<span class="label '.$messageBadgeColor.' label-as-badge">'.$message.'</span>';	}	public function unreadnotification(){		   $notificationNu = Auth::user()->NotificationUnseen()->count() ;                      $notificationBadgeColor = 'label-default';            if($notificationNu)              $notificationBadgeColor = 'label-success';                  		echo '<span class="label '.$notificationBadgeColor.' label-as-badge">'.$notificationNu.'</span>'  ;	}}